trigger:
  branches:
    include:
      - main
      - master

pool:
  vmImage: ubuntu-latest

variables:
  dockerRegistryServiceConnection: 'acr-connection'
  imageRepository: 'claimstatus'
  containerRegistry: 'introspect2bacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/ClaimStatus/Dockerfile'
  tag: '$(Build.BuildId)'
  imageName: '$(containerRegistry)/$(imageRepository):latest'  # Full image name with tag
  resourceGroup: 'introspect-2-b'  # Replace with your Azure resource group
  location: 'westeurope'  # Replace with your Azure region

stages:
- stage: Deploy1
  displayName: 'Deploy Azure Container Registry'
  variables:
    containerRegistryName: 'introspect2bacr'  # Name of your Azure Container Registry
    acrBicepFile: '$(Build.SourcesDirectory)/iac/acr-deploy.bicep'  # Path to the Bicep file
  jobs:
  - job: 'DeployACR'
    displayName: 'Deploy ACR if not exists'
    steps:
    - task: AzureCLI@2
      displayName: 'Check and Create ACR if not exists'
      inputs:
        azureSubscription: 'azure-subscription'  # Replace with your Azure service connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if ACR resource exists: $(containerRegistryName)"
          acrExists=$(az acr show --name $(containerRegistryName) --query "name" --output tsv 2>/dev/null || echo "")
          
          if [ -n "$acrExists" ]; then
              echo "Azure Container Registry $(containerRegistryName) already exists. Deployment will not proceed."
              #exit 1
          else
              echo "Azure Container Registry $(containerRegistryName) does not exist. Proceeding with deployment."
              # Deploy the ACR using the Bicep template
              az deployment group create \
              --resource-group $(resourceGroup) \
              --template-file $(acrBicepFile) \
              --parameters containerRegistryName=$(containerRegistryName) location=$(location)

              echo "Updating Azure DevOps service connection for ACR..."
              az devops service-endpoint update \
                --id $(dockerRegistryServiceConnection) \
                --name $(containerRegistryName) \
                --resource-group $(resourceGroup) \
                --registry $(containerRegistry)
          fi 
  - job: 'DeployLogAnalitics'
    displayName: 'Deploy Log Analytics if not exists'
    variables:
      logAnalyticsBicepFile: '$(Build.SourcesDirectory)/iac/aca-deploy-prerequisitesy.bicep'  # Path to the Bicep file
      logAnalyticsWorkspaceName: 'workspace-intospect2b-logs'  # Name of your Log Analytics workspace
    steps:
    - task: AzureCLI@2
      displayName: 'Check and Create Log Analytics if not exists'
      inputs:
        azureSubscription: 'azure-subscription'  # Replace with your Azure service connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if Log Analytics resource exists: $(logAnalyticsWorkspaceName)"
          appExists=$(az monitor log-analytics workspace show --resource-group $(resourceGroup) --workspace-name $(logAnalyticsWorkspaceName) --query "name" --output tsv 2>/dev/null || echo "")
          
          if [ -n "$appExists" ]; then
              echo "Log Analytics $(logAnalyticsWorkspaceName) already exists. Deployment will not proceed."
              #exit 1
          else
              echo "Log Analytics $(logAnalyticsWorkspaceName) does not exist. Proceeding with deployment."
              # Deploy the Log Analytics using the Bicep template
              az deployment group create \
              --resource-group $(resourceGroup) \
              --template-file $(logAnalyticsBicepFile) \
              --parameters logAnalyticsWorkspaceName=$(logAnalyticsWorkspaceName) location=$(location)
          fi 
  - job: 'Deploy Container Environment'
    displayName: 'Deploy Container Environment if not exists'
    variables:
      containerEnvBicepFile: '$(Build.SourcesDirectory)/iac/aca-deploy-prerequisitesx.bicep'  # Path to the Bicep file
      containerEnvironmentName: 'claimstatus-container-app-env'  # Name of your Container Environment
    steps:
    - task: AzureCLI@2
      displayName: 'Check and Create Container Environment if not exists'
      inputs:
        azureSubscription: 'azure-subscription'  # Replace with your Azure service connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if Container Environment resource exists: $(containerEnvironmentName)"
          appExists=$(az containerapp env show --resource-group $(resourceGroup) --name $(containerEnvironmentName) --query "name" --output tsv 2>/dev/null || echo "")
          
          if [ -n "$appExists" ]; then
              echo "Container Environment $(containerEnvironmentName) already exists. Deployment will not proceed."
              #exit 1
          else
              echo "Container Environment $(containerEnvironmentName) does not exist. Proceeding with deployment."
              # Deploy the Container Environment using the Bicep template
              az deployment group create \
              --resource-group $(resourceGroup) \
              --template-file $(containerEnvBicepFile) \
              --parameters containerEnvironmentName=$(containerEnvironmentName) location=$(location) logAnalyticsWorkspaceName=$(logAnalyticsWorkspaceName)
          fi

- stage: Build
  displayName: 'Build and Push Image'
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    steps:
    - script: |
       echo "Current working directory: $(pwd)"
       echo "--- Listing contents of $(Build.SourcesDirectory) (Repo Root) ---"
       ls -F $(Build.SourcesDirectory)
       echo "--- Listing contents of ClaimStatus/ directory (Expected Dockerfile location) ---"
       ls -F $(Build.SourcesDirectory)/ClaimStatus/
      displayName: 'D01: Verify File Paths'
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest
        buildContext: $(System.DefaultWorkingDirectory)
    - task: Docker@2
      displayName: 'Push Image to ACR'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: 'Deploy to Azure Container Apps'
  dependsOn: Build
  variables:
    containerRegistryName: 'introspect2bacr'  # Name of your Azure Container Registry
    acaBicepFile: '$(Build.SourcesDirectory)/iac/aca-deploy.bicep'  # Path to the Bicep file
  jobs:
  - job: Deploy
    displayName: 'Deploy Application'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy to Azure Container Apps using Bicep'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Check if the ACR resource exists
          echo "Checking if ACR resource exists: $(containerRegistry)"
          acrExists=$(az acr show --name $(containerRegistry) --query "name" --output tsv 2>/dev/null || echo "")

          if [ -n "$appExists" ]; then
            echo "Azure Container App $(imageRepository) already exists. Deployment will not proceed."
            exit 1
          else
            echo "Azure Container App $(imageRepository) does not exist. Proceeding with deployment."
          fi

          # Deploy the application using the Bicep template
          az deployment group create \
            --resource-group $(resourceGroup) \
            --template-file $(acaBicepFile) \
            --parameters containerImage=$(imageName) location=$(location)