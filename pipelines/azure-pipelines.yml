trigger:
  branches:
    include:
      - main
      - master

pool:
  vmImage: ubuntu-latest

variables:
  resourceGroup: 'introspect-2-b'  # Replace with your Azure resource group
  location: 'westeurope'  # Replace with your Azure region
  dockerRegistryServiceConnection: 'acr-connection'
  imageRepository: 'claimstatus'
  containerRegistry: 'introspect2bacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/ClaimStatus/Dockerfile'
  tag: '$(Build.BuildId)'
  imageName: '$(containerRegistry)/$(imageRepository):latest'  # Full image name with tag
  

stages:
- stage: DeployMandatoryResources
  displayName: 'Deploy Mandatory Resources'
  variables:
      containerRegistryName: 'introspect2bacr'  # Name of your Azure Container Registry
      logAnalyticsWorkspaceName: 'workspace-intospect2b-logs'  # Name of your Log Analytics workspace
      containerEnvironmentName: 'claimstatus-container-app-env'  # Name of your Container Environment
      acrExists: false
      logAnalyticsExists: false
  jobs:
  - job: CheckResources
    displayName: 'Check Resource Existence'
    outputs:       
      acrExists: $(acrExists)
    steps:
    - task: AzureCLI@2
      displayName: 'Check if Resources Exist'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if resources exist..."

          # Check if ACR exists
          acrExists=$(az acr show --name $(containerRegistryName) --query "name" --output tsv 2>/dev/null || echo "")
          if [ -n "$acrExists" ]; then
              echo "##vso[task.setvariable variable=acrExists]true"
              echo "acrExists value: $(acrExists)"
              echo "Azure Container Registry $(containerRegistryName) exists."
          else
              echo "##vso[task.setvariable variable=acrExists]false"
              echo "Azure Container Registry $(containerRegistryName) does not exist."
          fi

          # Check if Log Analytics exists
          logAnalyticsExists=$(az monitor log-analytics workspace show --resource-group $(resourceGroup) --workspace-name $(logAnalyticsWorkspaceName) --query "name" --output tsv 2>/dev/null || echo "")
          if [ -n "$logAnalyticsExists" ]; then
              logAnalyticsExists=true
              # print logAnalyticsExists value for debugging
              echo "LogAnalyticsExists value: $(logAnalyticsExists)"
              echo "Log Analytics Workspace $(logAnalyticsWorkspaceName) exists."
          else
              #logAnalyticsExists=false
              echo "LogAnalyticsExists value: $(logAnalyticsExists)"
              echo "Log Analytics Workspace $(logAnalyticsWorkspaceName) does not exist."
          fi

          # Check if Container Environment exists
          containerEnvExists=$(az containerapp env show --resource-group $(resourceGroup) --name $(containerEnvironmentName) --query "name" --output tsv 2>/dev/null || echo "")
          if [ -n "$containerEnvExists" ]; then
              echo "##vso[task.setvariable variable=containerEnvExists]true"
              echo "Container Environment $(containerEnvironmentName) exists."
          else
              echo "##vso[task.setvariable variable=containerEnvExists]false"
              # print ContainerEnvEsists value for debugging
              echo "ContainerEnvExists value: $(containerEnvExists)"
              echo "Container Environment $(containerEnvironmentName) does not exist."
          fi
    

  - job: DeployACR
    displayName: 'Deploy ACR if not exists'
    variables:
      acrBicepFile: '$(Build.SourcesDirectory)/iac/acr-deploy.bicep'  # Path to the Bicep file
    dependsOn: CheckResources
    condition: eq(variables.acrExists, 'false')  # Run only if ACR does not exist
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy ACR if not exists'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Azure Container Registry $(containerRegistryName)..."
          az deployment group create \
            --resource-group $(resourceGroup) \
            --template-file $(acrBicepFile) \
            --parameters containerRegistryName=$(containerRegistryName) location=$(location)
  
  - job: DeployLogAnalytics
    displayName: 'Deploy Log Analytics if not exists'
    variables:
      logAnalyticsBicepFile: '$(Build.SourcesDirectory)/iac/log-analytics-workspace-def.bicep'  # Path to the Bicep file
    dependsOn: CheckResources
    condition: eq(variables.logAnalyticsExists, 'false')  # Run only if Log Analytics does not exist
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Log Analytics Workspace'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Log Analytics Workspace $(logAnalyticsWorkspaceName)..."
          az deployment group create \
            --resource-group $(resourceGroup) \
            --template-file $(logAnalyticsBicepFile) \
            --parameters logAnalyticsWorkspaceName=$(logAnalyticsWorkspaceName) location=$(location)
  
  - job: DeployContainerEnvironment
    displayName: 'Deploy Container Environment if not exists'
    variables:
      containerEnvBicepFile: '$(Build.SourcesDirectory)/iac/container-environment-def.bicep'  # Path to the Bicep file
    dependsOn: DeployLogAnalytics  # Ensure this runs after Log Analytics
    condition: eq(variables.containerEnvExists, 'false')  # Run only if Container Environment does not exist
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Container Environment'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Container Environment $(containerEnvironmentName)..."
          az deployment group create \
            --resource-group $(resourceGroup) \
            --template-file $(containerEnvBicepFile) \
            --parameters containerEnvironmentName=$(containerEnvironmentName) location=$(location) logAnalyticsWorkspaceName=$(logAnalyticsWorkspaceName)
  
- stage: Build
  displayName: 'Build and Push Image'
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    steps:
    - script: |
       echo "Current working directory: $(pwd)"
       echo "--- Listing contents of $(Build.SourcesDirectory) (Repo Root) ---"
       ls -F $(Build.SourcesDirectory)
       echo "--- Listing contents of ClaimStatus/ directory (Expected Dockerfile location) ---"
       ls -F $(Build.SourcesDirectory)/ClaimStatus/
      displayName: 'D01: Verify File Paths'
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest
        buildContext: $(System.DefaultWorkingDirectory)
    - task: Docker@2
      displayName: 'Push Image to ACR'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(tag)
          latest

- stage: Deploy
  condition: false
  displayName: 'Deploy to Azure Container Apps'
  dependsOn: Build
  variables:
    containerRegistryName: 'introspect2bacr'  # Name of your Azure Container Registry
    acaBicepFile: '$(Build.SourcesDirectory)/iac/aca-deploy.bicep'  # Path to the Bicep file
  jobs:
  - job: Deploy
    displayName: 'Deploy Application'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy to Azure Container Apps using Bicep'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Check if the ACR resource exists
          echo "Checking if ACR resource exists: $(containerRegistry)"
          acrExists=$(az acr show --name $(containerRegistry) --query "name" --output tsv 2>/dev/null || echo "")

          if [ -n "$appExists" ]; then
            echo "Azure Container App $(imageRepository) already exists. Deployment will not proceed."
            exit 1
          else
            echo "Azure Container App $(imageRepository) does not exist. Proceeding with deployment."
          fi

          # Deploy the application using the Bicep template
          az deployment group create \
            --resource-group $(resourceGroup) \
            --template-file $(acaBicepFile) \
            --parameters containerImage=$(imageName) location=$(location)