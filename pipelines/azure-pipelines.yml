trigger: 
  branches:
    include:
      - main
      - master

pool:
  vmImage: ubuntu-latest

variables:
  resourceGroup: 'introspect-2-b'  # Replace with your Azure resource group
  location: 'westeurope'  # Replace with your Azure region
  dockerRegistryServiceConnection: 'acr-connection'
  azureSubscription: 'azure-subscription'
  imageRepository: 'claimstatus'
  containerRegistry: 'introspect2bacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/ClaimStatus/Dockerfile'
  tag: '$(Build.BuildId)'
  imageName: '$(containerRegistry)/$(imageRepository):$(Build.BuildId)'  # Full image name with tag
  

stages:
- stage: DeployMandatoryResources
  displayName: 'Deploy Mandatory Resources'
  variables:
      containerRegistryName: 'introspect2bacr'  # Name of your Azure Container Registry
      logAnalyticsWorkspaceName: 'workspace-intospect2b-logs'  # Name of your Log Analytics workspace
      containerEnvironmentName: 'claimstatus-container-app-env'  # Name of your Container Environment
      acrExists: false
      logAnalyticsExists: false
      containerEnvExists: false
      containerAppNameExist: false
  jobs:
  
  - job: CheckResources
    displayName: 'Check Resource Existence'
    steps:
    - task: AzureCLI@2
      name: passOutput
      displayName: 'Check if Resources Exist'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking if resources exist..."

          # Check if ACR exists
          acrNameExists=$(az acr show --name $(containerRegistryName) --resource-group $(resourceGroup) --query "name" --output tsv 2>/dev/null || echo "")
          if [ -n "acrNameExists" ]; then
              echo "##vso[task.setvariable variable=acrExists;isOutput=true]true"
              echo "Azure Container Registry $(containerRegistryName) exists. Deployment will not proceed."
          else
              echo "Azure Container Registry $(containerRegistryName) does not exist. Proceeding with deployment."
          fi

          # Check if Log Analytics exists
          logAnalyticsNameExists=$(az monitor log-analytics workspace show --resource-group $(resourceGroup) --workspace-name $(logAnalyticsWorkspaceName) --query "name" --output tsv 2>/dev/null || echo "")
          if [ -n "logAnalyticsNameExists" ]; then
              echo "##vso[task.setvariable variable=logAnalyticsExists;isOutput=true]true"
              echo "Log Analytics Workspace $(logAnalyticsWorkspaceName) exists. Deployment will not proceed."
          else
              echo "Log Analytics Workspace $(logAnalyticsWorkspaceName) does not exist. Proceeding with deployment."
          fi

          # Check if Container Environment exists
          containerEnvNameExists=$(az containerapp env show --name $(containerEnvironmentName) --resource-group $(resourceGroup) --query "name" --output tsv 2>/dev/null || echo "")
          if [ -n "containerEnvNameExists" ]; then
              echo "##vso[task.setvariable variable=containerEnvExists;isOutput=true]true"
              echo "Container Environment $(containerEnvironmentName) exists. Deployment will not proceed."
          else
              echo "Container Environment $(containerEnvironmentName) does not exist. Proceeding with deployment."
          fi

          # Check if Container App exists
          check if Container App exists
          containerAppNameExist=$(az containerapp show --name $(imageRepository) --resource-group $(resourceGroup) --query "name" --output tsv 2>/dev/null || echo "")
          if [ -n "containerAppNameExist" ]; then
             echo "##vso[task.setvariable variable=containerAppExist;isOutput=true]true"
             echo "Azure Container App $(imageRepository) already exists. Deployment will not proceed."
          else
             echo "Azure Container App $(imageRepository) does not exist. Proceeding with deployment."
          fi

  - job: Values
    displayName: 'Display Values for Debugging'
    dependsOn: CheckResources
    variables:
        acrExists: $[ dependencies.CheckResources.outputs['passOutput.acrExists'] ]
        logAnalyticsExists: $[ dependencies.CheckResources.outputs['passOutput.logAnalyticsExists'] ]
        containerEnvExists: $[ dependencies.CheckResources.outputs['passOutput.containerEnvExists'] ]
        containerAppNameExist: $[ dependencies.CheckResources.outputs['passOutput.containerAppExist'] ]
    steps:
    - script: |
        echo "ACR Exists: $(acrExists)"
        echo "Log Analytics Exists: $(logAnalyticsExists)"
        echo "Container Environment Exists: $(containerEnvExists)"
        echo "Container App Exists: $(containerAppNameExist)"
      displayName: 'Display Variables Values'

  - job: DeployACR
    displayName: 'Deploy ACR if not exists'
    variables:
      acrBicepFile: '$(Build.SourcesDirectory)/iac/acr-deploy.bicep'  # Path to the Bicep file
      acrCheckExists: $[ dependencies.CheckResources.outputs['passOutput.acrExists'] ]  
    dependsOn: CheckResources
    condition: eq(variables.acrCheckExists, 'false')  # Run only if ACR does not exist
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy ACR if not exists'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Azure Container Registry $(containerRegistryName)..."
          
          az deployment group create `
            --resource-group $(resourceGroup) `
            --template-file $(acrBicepFile) `
            --parameters containerRegistryName=$(containerRegistryName) `
              location=$(location)
  
  - job: DeployLogAnalytics
    displayName: 'Deploy Log Analytics if not exists'
    variables:
      logAnalyticsBicepFile: '$(Build.SourcesDirectory)/iac/log-analytics-workspace-def.bicep'  # Path to the Bicep file
      logAnalyticsCheckExists: $[ dependencies.CheckResources.outputs['passOutput.logAnalyticsExists'] ]
    dependsOn: CheckResources
    condition: eq(variables.logAnalyticsCheckExists, 'false')  # Run only if Log Analytics does not exist
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Log Analytics Workspace'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying Log Analytics Workspace $(logAnalyticsWorkspaceName)..."
          az deployment group create \
            --resource-group $(resourceGroup) \
            --template-file $(logAnalyticsBicepFile) \
            --parameters logAnalyticsWorkspaceName=$(logAnalyticsWorkspaceName) location=$(location)
            #--verbose
      
  - job: DeployContainerEnvironment
    displayName: 'Deploy Container Environment if not exists'
    variables:
      containerEnvBicepFile: '$(Build.SourcesDirectory)/iac/container-environment-def.bicep'  # Path to the Bicep file
      containerEnvCheckExists: $[ dependencies.CheckResources.outputs['passOutput.containerEnvExists'] ]
    dependsOn: DeployLogAnalytics  # Ensure this runs after Log Analytics
    condition: eq(variables.containerEnvCheckExists, 'false')  # Run only if Container Environment does not exist
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Container Environment'
      inputs:
        azureSubscription: 'azure-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "check variable containerEnvCheckExists: $(containerEnvCheckExists)"
          echo "Deploying Container Environment $(containerEnvironmentName)..."
          workspaceId=$(az monitor log-analytics workspace show --resource-group $(resourceGroup) --workspace-name $(logAnalyticsWorkspaceName) --query customerId --output tsv)
          
          echo "workspace id: $workspaceId"
          echo "workspace id from internal var ?"
          az deployment group create \
            --resource-group $(resourceGroup) \
            --template-file $(containerEnvBicepFile) \
            --parameters containerEnvironmentName=$(containerEnvironmentName) \
                location=$(location) \
                logAnalyticsWorkspaceName=$$(logAnalyticsWorkspaceName) \
                logAnalyticsWorkspaceId=workspaceId 
  
- stage: Build
  displayName: 'Build and Push Image'
  dependsOn: DeployMandatoryResources
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    steps:
    - script: |
       echo "Current working directory: $(pwd)"
       echo "--- Listing contents of $(Build.SourcesDirectory) (Repo Root) ---"
       ls -F $(Build.SourcesDirectory)
       echo "--- Listing contents of ClaimStatus/ directory (Expected Dockerfile location) ---"
       ls -F $(Build.SourcesDirectory)/ClaimStatus/
      displayName: 'D01: Verify File Paths'

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(tag)
          latest
        buildContext: $(System.DefaultWorkingDirectory)

    # Install Trivy and Syft
    - script: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        #wget -qO- https://github.com/anchore/syft/releases/latest/download/syft_1.0.1_linux_amd64.tar.gz | tar xz
        #sudo mv syft /usr/local/bin/
      displayName: 'Install Trivy and Syft'

    # Image scanning with Trivy
    - script: |
        trivy image --severity CRITICAL,HIGH $(imageName)
      displayName: 'Scan Docker Image with Trivy'
      continueOnError: false

    # Generate SBOM with Syft
    - script: |
        syft $(imageName) -o cyclonedx-json > sbom.json
      displayName: 'Generate SBOM with Syft'

    - task: Docker@2
      displayName: 'Push Image to ACR'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(tag)
          latest
